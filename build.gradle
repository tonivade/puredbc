plugins {
  id 'java-library'
  id 'jacoco'
  id 'maven-publish'
  id 'signing'
  alias(libs.plugins.nexus)
  alias(libs.plugins.versions)
  alias(libs.plugins.errorprone)
  alias(libs.plugins.eclipse)
}

group = 'com.github.tonivade'

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

jacoco {
  toolVersion = '0.8.11'
}

repositories {
  mavenLocal() 
  mavenCentral()
  maven {
    url = 'https://central.sonatype.com/repository/maven-snapshots/'
  }
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
  
  withJavadocJar()
  withSourcesJar()
}

compileJava {
  options.compilerArgs << '-Xlint:unchecked'
  options.compilerArgs << '-Xlint:rawtypes'
  options.release = 21
}

compileTestJava {
  options.compilerArgs << '-Xlint:unchecked'
  options.compilerArgs << '-Xlint:rawtypes'
  options.release = 21
}

tasks.withType(JavaCompile) {
  if (!name.toLowerCase().contains("test")) {
    options.errorprone {
      check("NullAway", net.ltgt.gradle.errorprone.CheckSeverity.ERROR)
      option("NullAway:AnnotatedPackages", "com.github.tonivade.puredbc")
      option("NullAway:SuggestSuppressions", "true")
    }
  } else {
    options.errorprone.enabled = false
  }
}

test {
  useJUnitPlatform()

  jacoco {
    destinationFile = file("${buildDir}/jacoco/test.exec")
  }

  reports.html.required = true
}

jacocoTestReport {
  reports {
    xml.required = true
    html.required = true
    xml.outputLocation = file("${buildDir}/reports/jacoco/report.xml")
  }
}

dependencies {
  errorprone libs.nullaway
  errorprone libs.errorprone
  annotationProcessor libs.purefunProcessor
  api libs.purefunFree
  implementation libs.purefunEffect
  runtimeOnly libs.purefunInstances
  implementation libs.r2dbcSpi
  implementation libs.r2dbcPool
  testRuntimeOnly libs.h2
  testRuntimeOnly libs.r2dbcH2
  testImplementation platform(libs.junitBom)
  testImplementation libs.hikaricp
  testImplementation libs.purecheck
  testImplementation libs.junitJupiter
  testRuntimeOnly libs.junitLauncher
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      
      from components.java

      pom {
        name = 'PureDBC'
        description = 'Pure Functional Database Connection Layer'
        url = 'https://github.com/tonivade/puredbc'
        inceptionYear = '2020'

        scm {
          url = 'https://github.com/tonivade/puredbc'
          connection = 'scm:https://github.com/tonivade/puredbc.git'
          developerConnection = 'scm:git://github.com/tonivade/puredbc.git'
        }

        licenses {
          license {
            name = 'The MIT License (MIT)'
            url = 'https://github.com/tonivade/puredbc/blob/master/LICENSE'
            distribution = 'repo'
          }
        }

        developers {
          developer {
            id = 'tonivade'
            name = 'Antonio MuÃ±oz'
            email = 'antoniogmc@gmail.com'
          }
        }
      }
    }
  }
}

signing {
  def signingKey = project.findProperty("signingKey")
  def signingPassword = project.findProperty("signingPassword")
  useInMemoryPgpKeys(signingKey, signingPassword)
  sign publishing.publications.mavenJava
}

tasks.withType(Sign) {
  onlyIf { isReleaseVersion }
}

nexusPublishing {
  repositories {
    sonatype {
      nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
      snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))

      stagingProfileId = '19a96b937cdb5'

      username = project.findProperty('nexusUsername')
      password = project.findProperty('nexusPassword')
    }
  }

  clientTimeout = Duration.ofSeconds(300)
  connectTimeout = Duration.ofSeconds(60)

  transitionCheckOptions {
    maxRetries.set(40)
    delayBetween.set(java.time.Duration.ofMillis(3000))
  }
}
